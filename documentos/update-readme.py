import os
from datetime import datetime
import pytz
import shutil

# Caminho base para o diret√≥rio onde est√£o os arquivos do script
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Constantes usadas no script
VERSAO_FILE = "versao.txt"        # Arquivo que controla a vers√£o do README
README_FILE = "README.md"         # Arquivo README a ser gerado/atualizado
UPDATE_FILE = "update-readme.py"  # Nome deste script (para ignorar na listagem)
FUSO_HORARIO_BRASIL = pytz.timezone("America/Sao_Paulo")  # Fuso hor√°rio para data/hora

def inicializar_versao():
    """
    Garante que o arquivo de vers√£o exista.
    Se n√£o existir, cria com valor inicial 1.
    Retorna o n√∫mero da vers√£o atual (int).
    """
    if not os.path.exists(VERSAO_FILE):
        with open(VERSAO_FILE, "w") as file:
            file.write("1")
        return 1
    with open(VERSAO_FILE, "r") as file:
        try:
            return int(file.read().strip()) 
        except ValueError:
            # Caso o conte√∫do seja inv√°lido, reinicia a vers√£o em 1
            return 1

def incrementar_versao(versao_atual):
    """
    Incrementa a vers√£o passada em 1 e salva no arquivo de controle.
    Retorna a nova vers√£o (int).
    """
    nova_versao = versao_atual + 1
    with open(VERSAO_FILE, "w") as file:
        file.write(str(nova_versao))
    return nova_versao

def obter_data_hora_brasilia():
    """
    Obt√©m a data e hora atuais no fuso hor√°rio de Bras√≠lia,
    formatadas como string "dd/mm/yyyy HH:MM:SS".
    """
    agora = datetime.now(FUSO_HORARIO_BRASIL)
    return agora.strftime("%d/%m/%Y %H:%M:%S")

def listar_arquivos():
    """
    Retorna uma lista ordenada dos arquivos presentes no diret√≥rio atual,
    ignorando arquivos espec√≠ficos definidos na constante 'ignorar'.
    Somente arquivos (n√£o diret√≥rios) s√£o listados.
    """
    ignorar = {README_FILE, VERSAO_FILE, UPDATE_FILE, ".gitignore"}
    return sorted([
        f for f in os.listdir(".")
        if os.path.isfile(f) and f not in ignorar
    ])

def gerar_arvore(path, prefixo="", ignorar=None):
    """
    Gera uma representa√ß√£o em √°rvore do diret√≥rio 'path', recursivamente,
    semelhante ao comando 'tree' do DOS/Linux.
    
    Args:
        path (str): Caminho do diret√≥rio raiz para gerar a √°rvore.
        prefixo (str): Prefixo usado para criar a indenta√ß√£o recursiva.
        ignorar (set): Conjunto de nomes de arquivos/pastas a ignorar.
    
    Retorna:
        str: A representa√ß√£o em √°rvore do diret√≥rio.
    """
    if ignorar is None:
        ignorar = {README_FILE, VERSAO_FILE, UPDATE_FILE, ".gitignore"}

    linhas = []
    try:
        itens = sorted([item for item in os.listdir(path) if item not in ignorar])
    except FileNotFoundError:
        return f"Diret√≥rio n√£o encontrado: {path}"
    except PermissionError:
        return f"Permiss√£o negada: {path}"

    total = len(itens)
    for i, item in enumerate(itens):
        caminho_item = os.path.join(path, item)
        ultimo = (i == total - 1)
        ponteiro = "‚îî‚îÄ‚îÄ " if ultimo else "‚îú‚îÄ‚îÄ "

        linhas.append(f"{prefixo}{ponteiro}{item}")

        if os.path.isdir(caminho_item):
            extensao_prefixo = "    " if ultimo else "‚îÇ   "
            linhas.append(gerar_arvore(caminho_item, prefixo + extensao_prefixo, ignorar))

    return "\n".join(linhas)

def copiar_readme_para_raiz():
    origem = os.path.join(os.path.dirname(os.path.abspath(__file__)), "README.md")
    destino = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "README.md"))
    try:
        shutil.copy2(origem, destino)
        print("::notice::‚úÖ README.md copiado para a raiz do projeto com sucesso.")
    except Exception as e:
        print(f"::error::‚ùå Erro ao copiar README para a raiz: {e}")

def atualizar_readme():
    """
    Fun√ß√£o principal do script:
    - Inicializa ou l√™ a vers√£o atual
    - Incrementa a vers√£o
    - Obt√©m a data/hora atual em Bras√≠lia
    - Lista os arquivos do diret√≥rio atual
    - Gera o README.md com todas as informa√ß√µes
    """
    versao_atual = inicializar_versao()
    nova_versao = incrementar_versao(versao_atual)
    data_hora = obter_data_hora_brasilia()
    arquivos = listar_arquivos()
    gerar_readme(nova_versao, data_hora, arquivos)

def gerar_readme(versao, data_hora, arquivos):
    """
    Cria ou sobrescreve o arquivo README.md com as informa√ß√µes da vers√£o,
    data de atualiza√ß√£o, lista de arquivos e a estrutura em √°rvore do diret√≥rio raiz.
    Recebe:
        - versao: n√∫mero da vers√£o atual (int)
        - data_hora: string da data/hora formatada
        - arquivos: lista de arquivos no diret√≥rio raiz
    """
    with open(README_FILE, "w", encoding="utf-8") as readme:
        readme.write("# Bem-vindo √† üçÉ **CampoInteligente** \n\n")
        readme.write(
            "O **CampoInteligente**, √© uma plataforma voltada para a agricultura familiar, "
            "oferecendo um chatbot com intelig√™ncia artificial que integra dados meteorol√≥gicos e de mercado "
            "para auxiliar no plantio, manejo e colheita. A navega√ß√£o √© simples, com foco na intera√ß√£o via WhatsApp.\n\n"
        )
        
        readme.write("<br /><br />")
        readme.write("\n## ‚ÑπÔ∏è Importante \n\n")
        readme.write("ESTE README √â ATUALIZADO AUTOMATICAMENTE A CADA COMMIT NA MAIN \n\n")
        readme.write("```\n")
        readme.write("Sistema: [WeaveTrip](https://www.WeaveTrip.tours.br/)\n")
        readme.write(f"Vers√£o: {versao} (AUTO-INCREMENTO)\n")
        readme.write(f"URL: https://www.WeaveTrip.tours.br/\n")
        readme.write(f"Data de Atualiza√ß√£o: {data_hora}\n")
        readme.write("Respons√°vel: Marcos Morais\n")
        readme.write("```\n")

        readme.write("<br /><br />\n")
        readme.write("## üß© Tecnologias Utilizadas\n\n")
        readme.write("<p align='left'>\n")
        readme.write("  <img src='https://img.shields.io/badge/Figma-F24E1E?logo=figma&logoColor=white' alt='Figma' />\n")
        readme.write("  <img src='https://img.shields.io/badge/Next.js-13.x-black?logo=next.js&logoColor=white' alt='Next.js' />\n")
        readme.write("  <img src='https://img.shields.io/badge/React-18.x-61DAFB?logo=react&logoColor=white' alt='React' />\n")
        readme.write("  <img src='https://img.shields.io/badge/Tailwind_CSS-3.x-38B2AC?logo=tailwindcss&logoColor=white' alt='Tailwind CSS' />\n")
        readme.write("  <img src='https://img.shields.io/badge/GitHub-100000?logo=github&logoColor=white&style=flat' alt='GitHub' />\n")
        readme.write("</p>\n\n")
        
        readme.write("### Descri√ß√£o das tecnologias:\n\n")
        readme.write("- **Next.js**: Framework React para cria√ß√£o de aplica√ß√µes web escal√°veis e de alto desempenho.\n")
        readme.write("- **React**: Biblioteca JavaScript para constru√ß√£o de interfaces de usu√°rio interativas.\n")
        readme.write("- **Tailwind CSS**: Framework CSS para estiliza√ß√£o r√°pida e personalizada.\n")
        readme.write("- **GitHub**: Controle de vers√£o e colabora√ß√£o no c√≥digo.\n\n")

        # Se√ß√£o adicional: estrutura em √°rvore
        readme.write("<br /><br />")
        readme.write("\n## üìÇ Documentos\n\n")
        readme.write("Lista de arquivos da pasta `documentos/`, atualizada automaticamente.\n\n")
        readme.write("```\n")
        readme.write(gerar_arvore("."))
        readme.write("\n```\n")

         # Se√ß√£o adicional: estrutura em √°rvore
        readme.write("<br /><br />")
        readme.write("\n## üå≥ Estrutura do Reposit√≥rio\n\n")
        readme.write("Lista de arquivos no `reposit√≥rio`, atualizada automaticamente.\n\n")
        readme.write("```\n")
        readme.write(gerar_arvore(".."))
        readme.write("\n```\n")

        readme.write("<br /><br />")
        readme.write("\n## üìú Licen√ßa\n\n")
        readme.write("Este projeto est√° licenciado sob os termos do arquivo [LICENSE](./documentos/LICENSE).\n\n")

if __name__ == "__main__":
    atualizar_readme()
    #copiar_readme_para_raiz()
