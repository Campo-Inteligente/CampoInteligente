import os
from datetime import datetime
import pytz

# Constantes usadas no script
VERSAO_FILE = "versao.txt"        # Arquivo que controla a vers√£o do README
README_FILE = "README.md"         # Arquivo README a ser gerado/atualizado
UPDATE_FILE = "update-readme.py"  # Nome deste script (para ignorar na listagem)
FUSO_HORARIO_BRASIL = pytz.timezone("America/Sao_Paulo")  # Fuso hor√°rio para data/hora

def inicializar_versao():
    """
    Garante que o arquivo de vers√£o exista.
    Se n√£o existir, cria com valor inicial 1.
    Retorna o n√∫mero da vers√£o atual (int).
    """
    if not os.path.exists(VERSAO_FILE):
        with open(VERSAO_FILE, "w") as file:
            file.write("1")
        return 1
    with open(VERSAO_FILE, "r") as file:
        try:
            return int(file.read().strip())
        except ValueError:
            # Caso o conte√∫do seja inv√°lido, reinicia a vers√£o em 1
            return 1

def incrementar_versao(versao_atual):
    """
    Incrementa a vers√£o passada em 1 e salva no arquivo de controle.
    Retorna a nova vers√£o (int).
    """
    nova_versao = versao_atual + 1
    with open(VERSAO_FILE, "w") as file:
        file.write(str(nova_versao))
    return nova_versao

def obter_data_hora_brasilia():
    """
    Obt√©m a data e hora atuais no fuso hor√°rio de Bras√≠lia,
    formatadas como string "dd/mm/yyyy HH:MM:SS".
    """
    agora = datetime.now(FUSO_HORARIO_BRASIL)
    return agora.strftime("%d/%m/%Y %H:%M:%S")

def listar_arquivos():
    """
    Retorna uma lista ordenada dos arquivos presentes no diret√≥rio atual,
    ignorando arquivos espec√≠ficos definidos na constante 'ignorar'.
    Somente arquivos (n√£o diret√≥rios) s√£o listados.
    """
    ignorar = {README_FILE, VERSAO_FILE, UPDATE_FILE, ".gitignore"}
    return sorted([
        f for f in os.listdir(".")
        if os.path.isfile(f) and f not in ignorar
    ])

def gerar_arvore():
    """
    Gera uma representa√ß√£o textual simples, no estilo 'tree' do DOS/Linux,
    para os arquivos e pastas no diret√≥rio atual (n√≠vel raiz apenas).
    Ignora arquivos/pastas definidos na constante 'ignorar'.
    Retorna a √°rvore como uma string formatada.
    """
    ignorar = {README_FILE, VERSAO_FILE, UPDATE_FILE, ".gitignore"}
    itens = sorted([f for f in os.listdir(".") if f not in ignorar])
    linhas = []
    total = len(itens)
    for i, item in enumerate(itens):
        prefixo = "‚îú‚îÄ‚îÄ "  # Prefixo padr√£o para todos, menos o √∫ltimo
        if i == total - 1:
            prefixo = "‚îî‚îÄ‚îÄ "  # √öltimo item recebe prefixo diferente
        linhas.append(f"{prefixo}{item}")
    return "\n".join(linhas)

def gerar_readme(versao, data_hora, arquivos):
    """
    Cria ou sobrescreve o arquivo README.md com as informa√ß√µes da vers√£o,
    data de atualiza√ß√£o, lista de arquivos e a estrutura em √°rvore do diret√≥rio raiz.
    Recebe:
        - versao: n√∫mero da vers√£o atual (int)
        - data_hora: string da data/hora formatada
        - arquivos: lista de arquivos no diret√≥rio raiz
    """
    with open(README_FILE, "w", encoding="utf-8") as readme:
        readme.write("# CampoInteligente\n\n")
        readme.write(
            "Bem-vindo ao **CampoInteligente**, uma plataforma voltada para a agricultura familiar, "
            "oferecendo um chatbot com intelig√™ncia artificial que integra dados meteorol√≥gicos e de mercado "
            "para auxiliar no plantio, manejo e colheita. A navega√ß√£o √© simples, com foco na intera√ß√£o via WhatsApp.\n\n"
        )
        readme.write("## üìÑ Lista de arquivos da raiz deste reposit√≥rio, atualizada automaticamente.\n\n")
        readme.write("**Sistema:** [Campo Inteligente](https://www.campointeligente.agr.br/)\n\n")
        readme.write(f"**Vers√£o:** {versao} (AUTO-INCREMENTO)\n\n")
        readme.write(f"**URL:** https://www.campointeligente.agr.br/\n\n")
        readme.write(f"**Data de Atualiza√ß√£o:** {data_hora}\n\n")
        readme.write("**Respons√°vel:** Marcos Morais\n\n")

        # Lista simples de arquivos
        readme.write("## Listagem de Arquivos\n\n")
        for arquivo in arquivos:
            readme.write(f"- {arquivo}\n")

        # Se√ß√£o adicional: estrutura em √°rvore
        readme.write("\n## üå≥ Estrutura em √Årvore da Raiz do Reposit√≥rio\n\n")
        readme.write("```\n")  # Bloco de c√≥digo para preservar formata√ß√£o
        readme.write(gerar_arvore())
        readme.write("\n```\n")

def atualizar_readme():
    """
    Fun√ß√£o principal do script:
    - Inicializa ou l√™ a vers√£o atual
    - Incrementa a vers√£o
    - Obt√©m a data/hora atual em Bras√≠lia
    - Lista os arquivos do diret√≥rio atual
    - Gera o README.md com todas as informa√ß√µes
    """
    versao_atual = inicializar_versao()
    nova_versao = incrementar_versao(versao_atual)
    data_hora = obter_data_hora_brasilia()
    arquivos = listar_arquivos()
    gerar_readme(nova_versao, data_hora, arquivos)

if __name__ == "__main__":
    atualizar_readme()